{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modelling and fitting two unresolved emission lines with a bayesian approach\n",
    "\n",
    "We will show how to model a spectrum with two superimposed lines and then try to retrieve the modelling parameters. this example is based on the preliminary examples :\n",
    "\n",
    "1. [Modelling and fitting one emission line](./script_example_model+fit_1_line.ipynb)\n",
    "2. [Modelling and fitting two resolved emission lines](./script_example_model+fit_2_lines.ipynb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import orb.fit\n",
    "import pylab as pl\n",
    "import numpy as np\n",
    "from orb.core import Lines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Third step: modelling and fitting a spectrum with two unresolved lines (classic fit and bayesian fit)\n",
    "\n",
    "Now the two lines are set to nearly the same velocity but the other parameters are unchanged."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "incident angle theta (in degrees): 15.445939567249903\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "halpha_cm1 = Lines().get_line_cm1('Halpha')\n",
    "\n",
    "step = 2943\n",
    "order = 8\n",
    "step_nb = 840\n",
    "axis_corr = 1.0374712062298759\n",
    "theta = orb.utils.spectrum.corr2theta(axis_corr)\n",
    "print('incident angle theta (in degrees):', theta)\n",
    "zpd_index = 168\n",
    "\n",
    "# model spectrum\n",
    "velocity1 = 50\n",
    "broadening1 = 15\n",
    "spectrum_axis, spectrum1 = orb.fit.create_cm1_lines_model_raw([halpha_cm1], [1], step, order, step_nb, axis_corr, zpd_index=zpd_index, fmodel='sincgauss',\n",
    "                                                                  sigma=broadening1, vel=velocity1)\n",
    "\n",
    "velocity2 = 10\n",
    "broadening2 = 30\n",
    "spectrum_axis, spectrum2 = orb.fit.create_cm1_lines_model_raw([halpha_cm1], [1], step, order, step_nb, axis_corr, zpd_index=zpd_index, fmodel='sincgauss',\n",
    "                                                                  sigma=broadening2, vel=velocity2)\n",
    "\n",
    "spectrum = spectrum1 + spectrum2\n",
    "\n",
    "# add noise\n",
    "SNR = 22\n",
    "spectrum += np.random.standard_normal(spectrum.shape) * 1. / SNR\n",
    "\n",
    "spectrum_axis = orb.utils.spectrum.create_cm1_axis(np.size(spectrum), step, order, corr=axis_corr)\n",
    "\n",
    "pl.plot(spectrum_axis, spectrum1, label='line 1')\n",
    "pl.plot(spectrum_axis, spectrum2, label='line 2')\n",
    "pl.plot(spectrum_axis, spectrum, label='line1 + line2 + noise')\n",
    "pl.xlim((15200, 15270))\n",
    "pl.legend()\n",
    "pl.savefig('gvar_model.svg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Classical fit\n",
    "\n",
    "The classical fit will be be unable to make any difference between an infinity of different possibilities which all gives approximatly the same chi2. the best fit will be very badly constrained and can give random sets of parameters depending on the noise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:root:nan in passed parameters: {'amp0': 1.18644 +- nan, 'amp1': 0.0516463 +- nan, 'pos_def1': 26.9033 +- nan, 'pos_def2': -57.1967 +- nan, 'sigma0': 34.6287 +- nan, 'sigma1': 0.5303 +- nan, 'cont_p0': 0.00261949 +- nan}\n",
      "WARNING:root:nan in passed parameters: {'amp0': 1.18644 +- nan, 'amp1': 0.0516463 +- nan, 'pos_def1': 26.9033 +- nan, 'pos_def2': -57.1967 +- nan, 'sigma0': 34.6287 +- nan, 'sigma1': 0.5303 +- nan, 'cont_p0': 0.00261949 +- nan}\n",
      "WARNING:root:nan in passed parameters: {'amp0': 1.18644 +- nan, 'amp1': 0.0516463 +- nan, 'pos_def1': 26.9033 +- nan, 'pos_def2': -57.1967 +- nan, 'sigma0': 34.6287 +- nan, 'sigma1': 0.5303 +- nan, 'cont_p0': 0.00261949 +- nan}\n",
      "WARNING:root:nan in passed parameters: {'amp0': 1.18644 +- nan, 'amp1': 0.0516463 +- nan, 'pos_def1': 26.9033 +- nan, 'pos_def2': -57.1967 +- nan, 'sigma0': 34.6287 +- nan, 'sigma1': 0.5303 +- nan, 'cont_p0': 0.00261949 +- nan}\n",
      "WARNING:root:nan in passed parameters: {'amp0': 1.18644 +- nan, 'amp1': 0.0516463 +- nan, 'pos_def1': 26.9033 +- nan, 'pos_def2': -57.1967 +- nan, 'sigma0': 34.6287 +- nan, 'sigma1': 0.5303 +- nan, 'cont_p0': 0.00261949 +- nan}\n",
      "WARNING:root:nan in passed parameters: {'amp0': 1.18644 +- nan, 'amp1': 0.0516463 +- nan, 'pos_def1': 26.9033 +- nan, 'pos_def2': -57.1967 +- nan, 'sigma0': 34.6287 +- nan, 'sigma1': 0.5303 +- nan, 'cont_p0': 0.00261949 +- nan}\n",
      "WARNING:root:nan in passed parameters: {'amp0': 1.18644 +- nan, 'amp1': 0.0516463 +- nan, 'pos_def1': 26.9033 +- nan, 'pos_def2': -57.1967 +- nan, 'sigma0': 34.6287 +- nan, 'sigma1': 0.5303 +- nan, 'cont_p0': 0.00261949 +- nan}\n",
      "WARNING:root:Nan in model\n",
      "WARNING:root:Nan in model\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "velocity (in km/s):  [26.9033 +- nan -57.1967 +- nan]\n",
      "broadening (in km/s):  [34.6287 +- nan 0.5303 +- nan]\n",
      "flux (in the unit of the spectrum amplitude / unit of the axis fwhm):  [2.33652 +- nan 0.0583332 +- nan]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nm_laser = 543.5 # wavelength of the calibration laser, in fact it can be any real positive number (e.g. 1 is ok)\n",
    "fit = orb.fit.fit_lines_in_spectrum(spectrum, [halpha_cm1, halpha_cm1], step, order, nm_laser, theta, zpd_index, \n",
    "                                    wavenumber=True, apodization=1, fmodel='sincgauss',\n",
    "                                    pos_def=['1', '2'],\n",
    "                                    pos_cov=[velocity1, velocity2], \n",
    "                                    sigma_guess=[broadening1, broadening2])\n",
    "print('velocity (in km/s): ', fit['velocity_gvar'])\n",
    "print('broadening (in km/s): ', fit['broadening_gvar'])\n",
    "print('flux (in the unit of the spectrum amplitude / unit of the axis fwhm): ', fit['flux_gvar'])\n",
    "\n",
    "# independant plot of the two lines models and the real lines\n",
    "pl.plot(spectrum_axis, spectrum, label='line1 + line2 + noise', ls=':', c='0.5')\n",
    "pl.plot(spectrum_axis, spectrum1, label='line 1', ls=':', c='red')\n",
    "pl.plot(spectrum_axis, spectrum2, label='line 2', ls=':', c='blue')\n",
    "models = fit['fitted_models']['Cm1LinesModel']\n",
    "pl.plot(spectrum_axis, fit['fitted_vector'], label='fit', ls='-', c='0.5')\n",
    "pl.plot(spectrum_axis, models[0], label='model 1', ls='-', c='red')\n",
    "pl.plot(spectrum_axis, models[1], label='model 2', ls='-', c='blue')\n",
    "pl.xlim((15200, 15270))\n",
    "pl.legend()\n",
    "# In fact this \"very bad fit\" may be not so bad, and will be, in general, not so bad... \n",
    "# but its outputs are not constrained as in the bayesian fit and can sometimes be very far from anything realistic\n",
    "# if you obtain a good fit, redo the model and the fit multiple times\n",
    "pl.title('A very bad fit')\n",
    "pl.savefig('gvar_bad_fit.svg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bayesian fit\n",
    "\n",
    "Now let's say you have some informations on the broadening and the velocity of one or both of the unresolved lines e.g. there is some diffused ionized gas in the foreground which is everywhere in the field of view and you are interested into the point-like source emitting in H-alpha at a slightly different velocity. \n",
    "\n",
    "LSQFIT, a fitting module which integrates gaussian random variable as priors (initial guess) has been developed by  G. Peter Lepage (Cornell University) (see https://github.com/gplepage/lsqfit and http://pythonhosted.org/lsqfit/index.html). This module gives the perfect answer to this problem. We can now inject some more information and help the fitting algorithm to find a unique and better constrained best fit.\n",
    "\n",
    "This algorithm has been implemented into ORCS. To use it you have to :\n",
    "\n",
    "- guess the SNR of the lines (yes, this is not so easy, but you can try with one rough SNR, do the fitting, compute the real SNR from the residual and then fit again, the only thing that will change is the uncertainty on the parameters)\n",
    "- define the initial guesses as random variables (we will use the package gvar which is intimatly linked to lsqfit - same author)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== velocity ===\n",
      "input velocity (km/s):  53(10) 7(10)\n",
      "fitted velocity (km/s):  [54.8(5.1) 8.5(4.8)]\n",
      "real velocity (km/s) 50 10\n",
      "=== broadening ===\n",
      "input broadening (km/s):  18(10) 27(10)\n",
      "fitted broadening (km/s):  [18.000(25) 27.000(37)]\n",
      "real broadening (km/s) 15 30\n",
      "=== flux ===\n",
      "flux (in the unit of the spectrum amplitude / unit of the axis fwhm):  [0.81(18) 1.50(18)]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import gvar #  library used to define gaussian random variables\n",
    "# now we can define our random variables, we are purposely biasing the inital guess \n",
    "# and giving a large error of +/- 10 km/s on both the velocity and the broadening\n",
    "\n",
    "velocity1_gvar = gvar.gvar(velocity1+3, 10) # velocity1 is known at +/- 10 km/s\n",
    "velocity2_gvar = gvar.gvar(velocity2-3, 10) # velocity2 is known at +/- 10 km/s\n",
    "broadening1_gvar = gvar.gvar(broadening1+3, 10) # broadening1 is known at +/- 10 km/s\n",
    "broadening2_gvar = gvar.gvar(broadening2-3, 10) # broadening2 is known at +/- 10 km/s\n",
    "\n",
    "fit = orb.fit.fit_lines_in_spectrum(spectrum, [halpha_cm1, halpha_cm1], step, order, nm_laser, theta, zpd_index, \n",
    "                                    wavenumber=True, apodization=1, fmodel='sincgauss',\n",
    "                                    pos_def=['1', '2'],\n",
    "                                    pos_cov=[velocity1_gvar, velocity2_gvar], \n",
    "                                    sigma_def='free',\n",
    "                                    sigma_guess=[broadening1_gvar, broadening2_gvar],\n",
    "                                    snr_guess=SNR)\n",
    "\n",
    "print('=== velocity ===')\n",
    "print('input velocity (km/s): ', velocity1_gvar, velocity2_gvar)\n",
    "print('fitted velocity (km/s): ', fit['velocity_gvar'])\n",
    "print('real velocity (km/s)', velocity1, velocity2)\n",
    "print('=== broadening ===')\n",
    "print('input broadening (km/s): ', broadening1_gvar, broadening2_gvar)\n",
    "print('fitted broadening (km/s): ', fit['broadening_gvar'])\n",
    "print('real broadening (km/s)', broadening1, broadening2)\n",
    "\n",
    "print('=== flux ===')\n",
    "print('flux (in the unit of the spectrum amplitude / unit of the axis fwhm): ', fit['flux_gvar'])\n",
    "# independant plot of the two lines models and the real lines\n",
    "pl.plot(spectrum_axis, spectrum, label='line1 + line2 + noise', ls=':', c='0.5')\n",
    "pl.plot(spectrum_axis, spectrum1, label='line 1', ls=':', c='red')\n",
    "pl.plot(spectrum_axis, spectrum2, label='line 2', ls=':', c='blue')\n",
    "models = fit['fitted_models']['Cm1LinesModel']\n",
    "pl.plot(spectrum_axis, fit['fitted_vector'], label='fit', ls='-', c='0.5')\n",
    "pl.plot(spectrum_axis, models[0], label='model 1', ls='-', c='red')\n",
    "pl.plot(spectrum_axis, models[1], label='model 2', ls='-', c='blue')\n",
    "pl.xlim((15200, 15270))\n",
    "pl.legend()\n",
    "pl.title('A much better fit')\n",
    "pl.savefig('gvar_good_fit.svg')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  },
  "toc": {
   "colors": {
    "hover_highlight": "#DAA520",
    "navigate_num": "#000000",
    "navigate_text": "#333333",
    "running_highlight": "#FF0000",
    "selected_highlight": "#FFD700",
    "sidebar_border": "#EEEEEE",
    "wrapper_background": "#FFFFFF"
   },
   "moveMenuLeft": true,
   "nav_menu": {
    "height": "117px",
    "width": "252px"
   },
   "navigate_menu": true,
   "number_sections": true,
   "sideBar": true,
   "threshold": 4,
   "toc_cell": false,
   "toc_section_display": "block",
   "toc_window_display": false,
   "widenNotebook": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
